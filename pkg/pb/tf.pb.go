// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: tf.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoInput) Reset() {
	*x = NoInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoInput) ProtoMessage() {}

func (x *NoInput) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoInput.ProtoReflect.Descriptor instead.
func (*NoInput) Descriptor() ([]byte, []int) {
	return file_tf_proto_rawDescGZIP(), []int{0}
}

type ValidateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validity bool `protobuf:"varint,1,opt,name=validity,proto3" json:"validity,omitempty"`
}

func (x *ValidateResult) Reset() {
	*x = ValidateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResult) ProtoMessage() {}

func (x *ValidateResult) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResult.ProtoReflect.Descriptor instead.
func (*ValidateResult) Descriptor() ([]byte, []int) {
	return file_tf_proto_rawDescGZIP(), []int{1}
}

func (x *ValidateResult) GetValidity() bool {
	if x != nil {
		return x.Validity
	}
	return false
}

type CommandOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk string `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *CommandOutput) Reset() {
	*x = CommandOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOutput) ProtoMessage() {}

func (x *CommandOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOutput.ProtoReflect.Descriptor instead.
func (*CommandOutput) Descriptor() ([]byte, []int) {
	return file_tf_proto_rawDescGZIP(), []int{2}
}

func (x *CommandOutput) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

var File_tf_proto protoreflect.FileDescriptor

var file_tf_proto_rawDesc = []byte{
	0x0a, 0x08, 0x74, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x6f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0x7b, 0x0a, 0x09, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x4e, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0f, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x08, 0x2e, 0x4e, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x30, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x08, 0x2e, 0x4e, 0x6f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x30, 0x01, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tf_proto_rawDescOnce sync.Once
	file_tf_proto_rawDescData = file_tf_proto_rawDesc
)

func file_tf_proto_rawDescGZIP() []byte {
	file_tf_proto_rawDescOnce.Do(func() {
		file_tf_proto_rawDescData = protoimpl.X.CompressGZIP(file_tf_proto_rawDescData)
	})
	return file_tf_proto_rawDescData
}

var file_tf_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tf_proto_goTypes = []interface{}{
	(*NoInput)(nil),        // 0: NoInput
	(*ValidateResult)(nil), // 1: ValidateResult
	(*CommandOutput)(nil),  // 2: CommandOutput
}
var file_tf_proto_depIdxs = []int32{
	0, // 0: Terraform.Validate:input_type -> NoInput
	0, // 1: Terraform.Plan:input_type -> NoInput
	0, // 2: Terraform.Apply:input_type -> NoInput
	1, // 3: Terraform.Validate:output_type -> ValidateResult
	2, // 4: Terraform.Plan:output_type -> CommandOutput
	2, // 5: Terraform.Apply:output_type -> CommandOutput
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tf_proto_init() }
func file_tf_proto_init() {
	if File_tf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tf_proto_goTypes,
		DependencyIndexes: file_tf_proto_depIdxs,
		MessageInfos:      file_tf_proto_msgTypes,
	}.Build()
	File_tf_proto = out.File
	file_tf_proto_rawDesc = nil
	file_tf_proto_goTypes = nil
	file_tf_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TerraformClient is the client API for Terraform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerraformClient interface {
	Validate(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*ValidateResult, error)
	Plan(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (Terraform_PlanClient, error)
	Apply(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (Terraform_ApplyClient, error)
}

type terraformClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraformClient(cc grpc.ClientConnInterface) TerraformClient {
	return &terraformClient{cc}
}

func (c *terraformClient) Validate(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*ValidateResult, error) {
	out := new(ValidateResult)
	err := c.cc.Invoke(ctx, "/Terraform/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) Plan(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (Terraform_PlanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Terraform_serviceDesc.Streams[0], "/Terraform/Plan", opts...)
	if err != nil {
		return nil, err
	}
	x := &terraformPlanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Terraform_PlanClient interface {
	Recv() (*CommandOutput, error)
	grpc.ClientStream
}

type terraformPlanClient struct {
	grpc.ClientStream
}

func (x *terraformPlanClient) Recv() (*CommandOutput, error) {
	m := new(CommandOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terraformClient) Apply(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (Terraform_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Terraform_serviceDesc.Streams[1], "/Terraform/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &terraformApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Terraform_ApplyClient interface {
	Recv() (*CommandOutput, error)
	grpc.ClientStream
}

type terraformApplyClient struct {
	grpc.ClientStream
}

func (x *terraformApplyClient) Recv() (*CommandOutput, error) {
	m := new(CommandOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TerraformServer is the server API for Terraform service.
type TerraformServer interface {
	Validate(context.Context, *NoInput) (*ValidateResult, error)
	Plan(*NoInput, Terraform_PlanServer) error
	Apply(*NoInput, Terraform_ApplyServer) error
}

// UnimplementedTerraformServer can be embedded to have forward compatible implementations.
type UnimplementedTerraformServer struct {
}

func (*UnimplementedTerraformServer) Validate(context.Context, *NoInput) (*ValidateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedTerraformServer) Plan(*NoInput, Terraform_PlanServer) error {
	return status.Errorf(codes.Unimplemented, "method Plan not implemented")
}
func (*UnimplementedTerraformServer) Apply(*NoInput, Terraform_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterTerraformServer(s *grpc.Server, srv TerraformServer) {
	s.RegisterService(&_Terraform_serviceDesc, srv)
}

func _Terraform_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Terraform/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).Validate(ctx, req.(*NoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_Plan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerraformServer).Plan(m, &terraformPlanServer{stream})
}

type Terraform_PlanServer interface {
	Send(*CommandOutput) error
	grpc.ServerStream
}

type terraformPlanServer struct {
	grpc.ServerStream
}

func (x *terraformPlanServer) Send(m *CommandOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _Terraform_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerraformServer).Apply(m, &terraformApplyServer{stream})
}

type Terraform_ApplyServer interface {
	Send(*CommandOutput) error
	grpc.ServerStream
}

type terraformApplyServer struct {
	grpc.ServerStream
}

func (x *terraformApplyServer) Send(m *CommandOutput) error {
	return x.ServerStream.SendMsg(m)
}

var _Terraform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Terraform",
	HandlerType: (*TerraformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Terraform_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Plan",
			Handler:       _Terraform_Plan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Apply",
			Handler:       _Terraform_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tf.proto",
}
